<?php

module_load_include('inc', 'dexp_layerslider', 'inc/slide');
/* Implement hook_menu */
function dexp_layerslider_menu()
{
  $items                                        = array();
  $items['admin/dexp_layerslider']              = array(
    'title' => 'Layer Slider',
    'page callback' => 'dexp_layerslider_list',
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/dexp_layerslider/add']          = array(
    'title' => 'Add Slide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'dexp_layerslider_form'
    ),
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'edit.dexp_layerslider.php'
  );
  $items['admin/dexp_layerslider/%/edit']       = array(
    'title' => 'Edit Slide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'dexp_layerslider_form',
      2
    ),
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_CALLBACK,
    'file' => 'edit.dexp_layerslider.php'
  );
  $items['admin/dexp_layerslider/%/clone']       = array(
    'title' => 'Clone Slide',
    'page callback' => 'dexp_layerslider_clone',
    'page arguments' => array(2),
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_CALLBACK,
    'file' => 'edit.dexp_layerslider.php'
  );
  $items['admin/dexp_layerslider/%/editslides'] = array(
    'title' => 'Edit Slide',
    'page callback' => 'dexp_layerslider_edit_sliders',
    'page arguments' => array(
      2
    ),
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE
  );
  $items['admin/dexp_layerslider/%/delete']     = array(
    'title' => 'Edit Slide',
    'page callback' => 'dexp_layerslider_delete',
    'page arguments' => array(
      2
    ),
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_CALLBACK
  );
  $items['admin/dexp_layerslider/%/export']     = array(
    'title' => 'Export Slide',
    'page callback' => 'dexp_layerslider_export',
    'page arguments' => array(
      2
    ),
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'inc/export.inc'
  );
  $items['admin/dexp_layerslider/import']       = array(
    'title' => 'Import Slide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'dexp_layerslider_import_form'
    ),
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'inc/import.inc'
  );
  $items['admin/dexp_layerslider/save']         = array(
    'title' => 'Edit Slider',
    'page callback' => 'dexp_layerslider_save',
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_CALLBACK
  );
  $items['admin/dexp_layerslider/preview']      = array(
    'title' => 'Slider Preview',
    'page callback' => 'dexp_layerslider_preview',
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_CALLBACK
  );
  $items['admin/dexp_layerslider/settings']     = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'dexp_layerslider_settings_form'
    ),
    'access arguments' => array(
      'administer dexplayerslider'
    ),
    'type' => MENU_NORMAL_ITEM
  );
  
  // To use local task menu items, there must be a parent page.
  $items['contextual']                   = array(
    'title' => 'The contextual example page',
    'page callback' => 'contextual_example_page',
    'page arguments' => array(
      1
    ),
    'access callback' => TRUE
  );
  return $items;
}

/**
 * Implements hook_permission()
 */

function dexp_layerslider_permission()
{
  return array(
    'administer dexplayerslider' => array(
      'title' => t('Administer Dexp LayerSlider'),
      'description' => t('Administer LayerSlider.')
    )
  );
}

function dexp_layerslider_settings_form()
{
  $form['dexp_layerslider_block_num'] = array(
    '#type' => 'textfield',
    '#title' => 'Number of blocks',
    '#default_value' => variable_get('dexp_layerslider_block_num', 3)
  );
  return system_settings_form($form);
}

/**
 * Implements hook_block_info().
 */
function dexp_layerslider_block_info()
{
  $blocks = array();
  $num    = variable_get('dexp_layerslider_block_num', 3);
  for ($i = 1; $i <= $num; $i++) {
    $blocks['dexp_layerslider_block_' . $i] = array(
      'info' => t('Layer Slider block ' . $i),
      'cache' => DRUPAL_NO_CACHE
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function dexp_layerslider_block_configure($delta = '')
{
  $form = array();
  
  if (str_replace('dexp_layerslider_block_', '', $delta) != $delta) {
    $results = $result = db_select('{dexp_layerslider}', 'd')->fields('d', array(
      'id',
      'name'
    ))->execute();
    $options = array();
    foreach ($results as $row) {
      $options[$row->id] = $row->name;
    }
    $num           = str_replace('dexp_layerslider_block_', '', $delta);
    $form['slide'] = array(
      '#type' => 'select',
      '#title' => t('Slideshow'),
      '#options' => $options,
      '#default_value' => variable_get('dexp_layerslider_block_slide_' . $num),
      '#description' => t('Select slideshow.')
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function dexp_layerslider_block_save($delta = '', $edit = array())
{
  if (str_replace('dexp_layerslider_block_', '', $delta) != $delta) {
    $num = str_replace('dexp_layerslider_block_', '', $delta);
    variable_set('dexp_layerslider_block_slide_' . $num, $edit['slide']);
  }
}

function dexp_layerslider_block_view_alter(&$data, $block)
{
  if (str_replace('dexp_layerslider_block_', '', $block->delta) != $block->delta) {
    $num                                                           = str_replace('dexp_layerslider_block_', '', $block->delta);
    $sid                                                           = variable_get('dexp_layerslider_block_slide_' . $num);
    $contextual_links                                              = array(
      'admin/dexp_layerslider',
      array(
        $sid
      )
    );
    $data['content']['#contextual_links']['dexp_layerslider_edit'] = $contextual_links;
  }
}

function dexp_layerslider_block_view($delta = '')
{
  $block = array();
  if (str_replace('dexp_layerslider_block_', '', $delta) != $delta) {
    $num                                           = str_replace('dexp_layerslider_block_', '', $delta);
    $slide                                         = variable_get('dexp_layerslider_block_slide_' . $num);
    $block['content']                              = menu_tree($delta);
    $block['content']['#markup']                   = dexp_layerslider_block_content($slide);
    $block['content']['#contextual_links']['menu'] = array(
      'admin/structure/menu/manage',
      array(
        $delta
      )
    );
  }
  return $block;
}

function dexp_layerslider_block_content($sid)
{
  $slideshow = dexp_layerslider_load($sid);
  if (!$slideshow)
    return 'No slider selected';
  $module_path = drupal_get_path('module', 'dexp_layerslider');
  drupal_add_js($module_path . '/plugins/rs-plugin/js/jquery.themepunch.tools.min.js');
  drupal_add_js($module_path . '/plugins/rs-plugin/js/jquery.themepunch.revolution.min.js');
  drupal_add_css($module_path . '/plugins/rs-plugin/css/settings.css');
  drupal_add_css($module_path . '/css/layerslider.css');
  return theme('dexp_layerslider_slides', array(
    'id' => $sid,
    'slides' => $slideshow->slides,
    'settings' => $slideshow->settings
  ));
}

function dexp_layerslider_list()
{
  $header  = array(
    'ID',
    'Name',
    'Action'
  );
  $results = db_select('{dexp_layerslider}', 'd')->fields('d', array(
    'id',
    'name'
  ))->execute();
  $rows    = array();
  foreach ($results as $row) {
    $row->name = l($row->name, 'admin/dexp_layerslider/' . $row->id . '/edit');
    $tmp       = (array) $row;
    $tmp[]     = l('Edit slides', 'admin/dexp_layerslider/' . $row->id . '/editslides') . ', ' . l('Export', 'admin/dexp_layerslider/' . $row->id . '/export') . ', ' . l('Clone','admin/dexp_layerslider/' . $row->id . '/clone') . ',' . l('Delete', 'admin/dexp_layerslider/' . $row->id . '/delete');
    $rows[]    = $tmp;
  }
  return theme_table(array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => false,
    'empty' => t('No slider created yet.')
  ));
}

function dexp_layerslider_edit_sliders($id)
{
  require_once 'defined.php';
  $media_info = system_get_info('module', 'media');
  if (version_compare($media_info['version'], '7.x-2.*') >= 0) {
      if(version_compare($media_info['version'], '7.x-2.*dev') >= 0){
        //Media 2.x-dev
        drupal_add_library('media', 'media_browser');
	    drupal_add_library('media', 'media_browser_settings');
      }else{
        // Media >= 2.0
        module_load_include('inc', 'media', 'includes/media.browser');
        $attach = array();
        media_attach_browser_js($attach);
        drupal_process_attached($attach);
      }
  } else {
    // Media 1.x
    module_load_include('inc', 'media', 'wysiwyg_plugins/media');
    media_include_browser_js();
  }
  drupal_add_library('system', 'ui.autocomplete');
  $fonts = json_decode(file_get_contents(__DIR__.'/font-list.json'));
  foreach($fonts->items as $k=>$font){
    $fonts->items[$k]->label = $font->family;
    $fonts->items[$k]->value = $font->family;
    if(!isset($fonts->items[$k]->{'data-google'})){
      $fonts->items[$k]->{'data-google'} = true;
    }
  }
  drupal_add_js(array('google_fonts'=>$fonts,'dexp_layerslider_save_path'=>url('admin/dexp_layerslider/save')),'setting');
  $capltionclasses_str = implode(' ', $captionclasses);
  drupal_add_js('var $captionclasses = \'' . $capltionclasses_str . '\';', 'inline');
  $module_path = drupal_get_path('module', 'dexp_layerslider');
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.dropable');
  drupal_add_library('system', 'ui.sortable');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'ui.tabs');
  drupal_add_css($module_path . '/plugins/font-awesome/css/font-awesome.min.css');
  drupal_add_css($module_path . '/css/admin.style.css');
  drupal_add_js($module_path . '/js/dexp.layerslider.js');
  drupal_add_js($module_path . '/js/admin.globalsettings.js');
  drupal_add_js($module_path . '/plugins/rs-plugin/js/jquery.themepunch.revolution.min.js');
  drupal_add_js($module_path . '/plugins/rs-plugin/js/jquery.themepunch.tools.min.js');
  drupal_add_css($module_path . '/plugins/rs-plugin/css/settings.css');
  $slideshow   = dexp_layerslider_load($id);
  $destination = isset($_GET['destination']) ? $_GET['destination'] : 'admin/dexp_layerslider';
  $destination = url($destination);
  $js          = 'var destination = "' . $destination . '";var $settings=' . json_encode($slideshow->settings) . ';var $slides = ' . json_encode($slideshow->slides) . '; var $layers = new Array(); var $currentSlide=0; var $currentLayer=0;';
  $new_js = array(
    'dexp_layerslider' => array(
        'slides' => $slideshow->slides,
        'settings' => $slideshow->settings,
    ),
  );
  drupal_add_js($new_js, 'setting');
  drupal_add_js($js, 'inline');
  drupal_add_js(drupal_get_path('module', 'dexp_layerslider') . '/js/admin.layerslider.js');
  ob_start();
  include 'html/layeroptions.php';
  $content = ob_get_clean();
  return $content;
}

function dexp_layerslider_delete($slideid)
{
  return drupal_get_form('dexp_layerslider_confirm_form');
}

function dexp_layerslider_confirm_form($form_state)
{
  $form       = array();
  $form['id'] = array(
    '#type' => 'hidden',
    '#default_value' => arg(2)
  );
  return confirm_form($form, 'Do you really want to detele this slide?', 'admin/dexp_layerslider', NULL, 'Delete', 'Cancel');
}

function dexp_layerslider_confirm_form_submit($form, &$form_state)
{
  $slideid = $form['id']['#value'];
  db_delete('dexp_layerslider')->condition('id', $slideid)->execute();
  drupal_set_message('The slide has been deleted');
  drupal_goto('admin/dexp_layerslider');
}

function dexp_layerslider_save()
{
  header('Content-type: application/json');
  $sid      = $_REQUEST['sid'];
  $data     = $_REQUEST['data'];
  $settings = $_REQUEST['settings'];
  db_update('{dexp_layerslider}')->fields(array(
    'data' => $data,
    'settings' => $settings
  ))->condition('id', $sid, '=')->execute();
  $result = array(
    'data' => 'saved'
  );
  print json_encode($result);
  exit(0);
}

function dexp_layerslider_preview()
{
  $sid      = 1;
  $slides   = json_decode(base64_decode($_REQUEST['data']));
  $settings = json_decode(base64_decode($_REQUEST['settings']));
  print theme('dexp_layerslider_block', array(
    'sid' => $sid,
    'slides' => $slides,
    'settings' => $settings
  ));
  exit(0);
}

/* Implements hook_theme(). */

function dexp_layerslider_theme()
{
  $path                              = drupal_get_path('module', 'dexp_layerslider');
  $themes['dexp_layerslider_slides'] = array(
    'template' => 'slides',
    'path' => $path . '/theme',
    'pattern' => 'layerslider__',
    'preprocess functions' => array(
      'template_preprocess',
      'dexp_layerslider_preprocess_slides'
    ),
    'variables' => array()
  );
  $themes['dexp_layerslider_slide']  = array(
    'template' => 'slide',
    'path' => $path . '/theme',
    'pattern' => 'layerslider__',
    'preprocess functions' => array(
      'template_preprocess',
      'dexp_layerslider_preprocess_slide'
    ),
    'variables' => array()
  );
  $themes['dexp_layerslider_layer']  = array(
    'template' => 'layer',
    'path' => $path . '/theme',
    'pattern' => 'layerslider__',
    'preprocess functions' => array(
      'template_preprocess',
      'dexp_layerslider_preprocess_layer'
    ),
    'variables' => array()
  );
  return $themes;
}

function dexp_layerslider_preprocess_slides(&$vars)
{
  $vars['theme_hook_suggestions'][]  = 'layerslider__slides';
  $slides                            = $vars['slides'];
  $settings                          = $vars['settings'];
  $html_id                           = drupal_html_id('dexp_layerslider');
  $vars['id']                        = $html_id;
  $vars['attributes_array']['id']    = $html_id;
  $vars['attributes_array']['class'] = 'layerslider-bannercontainer tp-simpleresponsive';
  $vars['classes_array'][] = 'layerslider-bannercontainer tp-simpleresponsive';
  $vars['attributes_array']['style'] = "max-height: {$settings->startheight}px;";
  $vars['content']                   = '';
  if(isset($settings->custom_css) && !empty($settings->custom_css)){
    drupal_add_css($settings->custom_css,'inline');
  }
  if(isset($settings->loopsingle) && $settings->loopsingle && count($slides) == 1){
    $slides[] = $slides[0];
  }
  foreach ($slides as $slide) {
    $vars['content'] .= theme('dexp_layerslider_slide', array(
      'slide' => $slide
    ));
  }
}

function dexp_layerslider_preprocess_slide(&$vars)
{
  $slide  = $vars['slide'];
  $layers = $slide->layers;
  if ($slide->slide_link) {
    $vars['attributes_array']['data-link'] = $slide->slide_link;
  }
  $vars['attributes_array']['data-transition']  = $slide->data_transition;
  $vars['attributes_array']['data-title']  = isset($slide->title)?$slide->title:'';
  $vars['attributes_array']['data-masterspeed'] = $slide->data_masterspeed;
  if ($slide->data_transition == 'boxfade') {
    $vars['attributes_array']['data-slotamount'] = $slide->data_slotamount;
  }
  if(isset($slide->data_delay)){
    $vars['attributes_array']['data-delay'] = $slide->data_delay;
  }
  if(isset($slide->data_thumb) && $slide->data_thumb){
    $vars['attributes_array']['data-thumb'] = $slide->data_thumb;
  }
  if(isset($slide->data_kenburns) && $slide->data_kenburns == 'on'){
    //$vars['attributes_array']['data-kenburns'] = "on";
    //$vars['attributes_array']['data-duration'] = $slide->data_duration;
    //$vars['attributes_array']['data-bgposition'] = $slide->data_bgposition;
    //$vars['attributes_array']['data-bgpositionend'] = $slide->data_bgpositionend;
    //$vars['attributes_array']['data-ease'] = "Linear.easeNone";
    $vars['content'] = "<img src=\"{$slide->background_image}\" alt=\"kenburns1\" data-bgfit=\"100\" data-bgfitend=\"130\" data-bgposition=\"{$slide->data_bgposition}\" data-bgpositionend=\"{$slide->data_bgpositionend}\" data-kenburns=\"on\" data-duration=\"{$slide->data_duration}\"/>";
  }else{
    $vars['content'] = "<img src=\"{$slide->background_image}\" alt=\"\" data-bgposition=\"{$slide->data_bgposition}\" data-bgfit=\"cover\"/>";
  }
  //$zindex = count($layers) + 10;
  foreach ($layers as $layer) {
    $vars['content'] .= theme('dexp_layerslider_layer', array(
      'layer' => $layer,
      'zindex' => $layer->index
    ));
  }
}

function dexp_layerslider_preprocess_layer(&$vars)
{
  $layer                               = $vars['layer'];
  $html_id = drupal_html_id('dexp_layerslider_layer');
  $vars['attributes_array']['id'] = $html_id;
  $vars['attributes_array']['class'][] = 'tp-caption';
  $vars['classes_array'][] = 'tp-caption';
  if(!isset($layer->resizeme) || $layer->resizeme == 1){
    $vars['attributes_array']['class'][] = 'tp-resizeme';
    $vars['classes_array'][] = 'tp-resizeme';
  }
  $vars['attributes_array']['class'][] = $layer->incomingclasses;
  $vars['classes_array'][] = $layer->incomingclasses;
  if ($layer->outgoingclasses) {
    $vars['attributes_array']['class'][] = $layer->outgoingclasses;
    $vars['classes_array'][] = $layer->outgoingclasses;
  }
  if ($layer->type == 'text') {
    $vars['attributes_array']['class'][] = $layer->text_style;
    $vars['classes_array'][] = $layer->text_style;
  }
  if (isset($layer->custom_class) && $layer->custom_class) {
    $vars['attributes_array']['class'][] = $layer->custom_class;
    $vars['classes_array'][] = $layer->custom_class;
  }
  if(isset($layer->voffset) && $layer->voffset){
      $vars['attributes_array']['data-voffset'] = $layer->voffset;
  }
  if(isset($layer->hoffset) && $layer->hoffset){
      $vars['attributes_array']['data-hoffset'] = $layer->hoffset;
  }
  $vars['attributes_array']['data-x']     = $layer->left;
  $vars['attributes_array']['data-y']     = $layer->top;
  $vars['attributes_array']['data-speed'] = $layer->data_speed;
  $vars['attributes_array']['data-start'] = $layer->data_start;
  if(isset($layer->data_endspeed) && !empty($layer->data_endspeed)){
    $vars['attributes_array']['data-endspeed'] = $layer->data_endspeed;
  }
  if ($layer->data_end) {
    $vars['attributes_array']['data-end'] = $layer->data_end;
  }
  $vars['attributes_array']['data-easing'] = $layer->data_easing;
  if ($layer->data_endeasing) {
    $vars['attributes_array']['data-endeasing'] = $layer->data_endeasing;
  }
  $layer_css = "z-index:{$vars['zindex']};";
  if ($layer->custom_css) {
    $layer_css .= $layer->custom_css;
  }
  if($layer->type == 'text'){
    if(isset($layer->google_font) && $layer->google_font){
      if(strpos($layer->google_font,',') === false){
        $font = str_replace(' ','+',$layer->google_font);
        drupal_add_css("https://fonts.googleapis.com/css?family={$font}:{$layer->font_style}",'external');
      }
      if(strpos($layer->google_font,',') === false){
        $layer_css .= "font-family:{$layer->google_font};";
      }else{
        $layer_css .= "font-family:'{$layer->google_font}';";
      }
      if($layer->font_style == 'regular'){
        $layer_css .= "font-weight:400;";
      }elseif(strpos($layer->font_style,'italic') !== false){
        $layer_css .= "font-style:italic;";
        $font_weight = str_replace('italic','',$layer->font_style);
        $layer_css .= "font-weight:{$font_weight};";
      }else{
        $layer_css .= "font-weight:{$layer->font_style};";
      }
    }
    if(isset($layer->font_size) && !empty($layer->font_size)){
      $layer_css .= "font-size:{$layer->font_size};";
    }
    if(isset($layer->font_color) && !empty($layer->font_color)){
      $layer_css .= "color:{$layer->font_color};";
    }
  }
  $layer_css                        = trim(preg_replace('/\s+/', ' ', $layer_css));
  drupal_add_css("#{$html_id}{{$layer_css}}",'inline');
  if ($layer->incomingclasses == 'customin') {
    $vars['attributes_array']['data-customin'] = $layer->customin;
  }
  if ($layer->outgoingclasses == 'customout') {
    $vars['attributes_array']['data-customout'] = $layer->customout;
  }
  switch ($layer->type) {
    case 'text':
      $split = isset($layer->splitin)?$layer->splitin:'none';
      $vars['attributes_array']['data-splitin'] = $split;
      $vars['attributes_array']['data-elementdelay'] = "0.1";
      if (isset($layer->link) && $layer->link) {
		if(strpos($layer->link,'slide-') === 0){
          $link_to_slide = str_replace('slide-','',$layer->link);
          $link_to_slide = trim($link_to_slide);
          drupal_add_js("jQuery('#{$html_id}').css({cursor:'pointer'}).click(function(){jQuery(this).parents('.layerslider-banner').revolution().revshowslide({$link_to_slide});return false;})",array('type'=>'inline','scope'=>'footer'));
          $vars['content'] = $layer->text;
        }else{
          $vars['content'] = l($layer->text, $layer->link, array(
            'html' => true
          ));
        }
      } else {
        $vars['content'] = $layer->text;
      }
      $vars['content'] = $vars['content'];
      break;
    case 'image':
      if (isset($layer->link) && $layer->link) {
        if(strpos($layer->link,'slide-') === 0){
          $link_to_slide = str_replace('slide-','',$layer->link);
          $link_to_slide = trim($link_to_slide);
          drupal_add_js("jQuery('#{$html_id}').css({cursor:'pointer'}).click(function(){jQuery(this).parents('.layerslider-banner').revolution().revshowslide({$link_to_slide});return false;})",array('type'=>'inline','scope'=>'footer'));
          $vars['content'] = "<img src=\"{$layer->image}\" alt=\"\"/>";
        }else{
          $vars['content'] = l("<img src=\"{$layer->image}\"/>", $layer->link, array(
            'html' => true
          ));
        }
      } else {
        $vars['content'] = "<img src=\"{$layer->image}\" alt=\"\"/>";
      }
      break;
    case 'video':
      $video_control  = 1;
      $video_autoplay = $layer->video_autoplay;
      $video_loop     = 0;
      $vars['attributes_array']['class'][] = 'tp-videolayer';
      $vars['classes_array'][] = 'tp-videolayer';
      if(isset($layer->aspectratio)){
        $vars['attributes_array']['data-aspectratio'] = $layer->aspectratio;
      }
      if(isset($layer->autoplayonlyfirsttime)){
        $vars['attributes_array']['data-autoplayonlyfirsttime'] = $layer->autoplayonlyfirsttime;
      }
      if(isset($layer->forcerewind)){
        $vars['attributes_array']['data-forcerewind'] = $layer->forcerewind;
      }
      if ($video_autoplay) {
        $vars['attributes_array']['data-autoplay']    = 'true';
        //$vars['attributes_array']['data-forcerewind'] = 'true';
      }
      if($layer->video_mute){
        $vars['attributes_array']['data-volume']         = 'mute';
      }
      if(isset($layer->video_loop) && $layer->video_loop){
        $vars['attributes_array']['data-videoloop'] = $layer->video_loop;
      }
      if($layer->video_controls){
        $vars['attributes_array']['data-videocontrols'] = 'controls';
      }else{
        $vars['attributes_array']['data-videocontrols'] = 'none';
      }
      if(isset($layer->video_nextslideatend) && $layer->video_nextslideatend){
        $vars['attributes_array']['data-nextslideatend'] = 'true';
      }else{
        $vars['attributes_array']['data-nextslideatend'] = 'false';  
      }
      if ($layer->video_fullwidth) {
        if(isset($layer->video_dottedoverlay) && !empty($layer->video_dottedoverlay)){
            $vars['attributes_array']['data-dottedoverlay'] = $layer->video_dottedoverlay;
        }
        $vars['attributes_array']['class'][]         = 'fullscreenvideo';
        $vars['classes_array'][]         = 'fullscreenvideo';
        $vars['attributes_array']['data-autoplay']   = 'true';
        $vars['attributes_array']['data-forcecover'] = 'true';
        //$vars['attributes_array']['data-autoplayonlyfirsttime'] = 'false';
        $video_control                               = 0;
        $video_autoplay                              = 1;
        //$video_loop                                  = 1;
        $layer->video_width = '100%';
        $layer->video_height = '100%';
      }
      $vars['attributes_array']['data-videowidth'] = $layer->video_width;
      $vars['attributes_array']['data-videoheight'] = $layer->video_height;
      if ($layer->video_type == 'vimeo') {
        $vars['content'] = "";
        $vars['attributes_array']['data-vimeoid'] = $layer->vimeo_video;
        $vars['attributes_array']['data-videoattributes'] = 'enablejsapi=1&html5=1&hd=1&wmode=opaque&showinfo=0&rel=0';
      } elseif($layer->video_type == 'youtube') {
        $vars['content'] = "";
        $vars['attributes_array']['data-ytid'] = $layer->youtube_video;
        $vars['attributes_array']['data-videoattributes']="enablejsapi=1&html5=1&hd=1&wmode=opaque&showinfo=0&rel=0";
      } elseif($layer->video_type == 'html5'){
        if(isset($layer->html5_video_poster) && !empty($layer->html5_video_poster)){
            $vars['attributes_array']['data-videoposter'] = $layer->html5_video_poster;
        }
        if(isset($layer->html5_video_mp4) && !empty($layer->html5_video_mp4)){
            $vars['attributes_array']['data-videomp4'] = $layer->html5_video_mp4;
        }
        if(isset($layer->html5_video_webm) && !empty($layer->html5_video_webm)){
            $vars['attributes_array']['data-videowebm'] = $layer->html5_video_webm;
        }
        if(isset($layer->html5_video_ogv) && !empty($layer->html5_video_ogv)){
            $vars['attributes_array']['data-videoogv'] = $layer->html5_video_ogv;
        }
      }
  }
}
