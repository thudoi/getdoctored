<?php
/*
 * Implement hook_menu
 */

function dexp_grid_menu() {
  $items = array();
  $items['drupalexp/grid_masonry/save/%/%/%/%'] = array(
      'title' => 'Masonry Settings',
      'page callback' => 'dexp_grid_masonry_save',
      'page arguments' => array(3, 4, 5, 6),
      'access arguments' => array('administer dexp grid masonry'),
      'type' => MENU_CALLBACK,
  );
  return $items;
}

/*
 * Implements hook_views_api
 */

function dexp_grid_views_api() {
  return array(
      'api' => 3,
  );
}

/**
 * Preprocess function to build the dexp views grid
 */
function template_preprocess_views_dexp_grid(&$vars) {
  $module_path = drupal_get_path('module','dexp_grid');
  drupal_add_css($module_path.'/css/dexp-grid.css');
  $view = $vars['view'];
  $vars['view_id'] = drupal_html_id($view->name . '-' . $view->current_display);
  $options = $view->style_plugin->options;
  $vars['options'] = $options;
  if($options['grid_style'] == 'classic'){
    drupal_add_css($module_path.'/css/dexp-grid-classic.css');
  }
  //if($options['grid_style'] == 'masonry' || $options['grid_style'] == 'masonry_resize' || $options['grid_filter']){
    drupal_add_js($module_path.'/js/jquery.shuffle.min.js');
    drupal_add_js($module_path.'/js/dexp-grid.js');
  //}
  if($options['grid_filter']){
    $vocab = $options['grid_filter_vocabulary'];
    $categories = array();
    $taxonomies = taxonomy_get_tree($vocab);
    foreach ($taxonomies as $tax) {
      if ($tax->parents[0] == 0) {
        $key = drupal_html_class($tax->name);
        $categories[$key] = $tax->name;
      }
    }
    $vars['categories'] = $categories;
  }
  //if($options['grid_style'] == 'masonry_resize'){
  $js = array(
    'dexp_grid_masonry' => array(
        $vars['view_id'] => array(
            'grid_cols_lg' => (int)$options['grid_cols_lg'],
            'grid_cols_md' => (int)$options['grid_cols_md'],
            'grid_cols_sm' => (int)$options['grid_cols_sm'],
            'grid_cols_xs' => (int)$options['grid_cols_xs'],
            'grid_margin' => (int) $options['grid_margin'],
            'grid_ratio' => (float) $options['grid_ratio']
        ),
    ),
  );
  drupal_add_js($js, 'setting');
  //}
  if ($options['grid_style'] == 'masonry_resize' && user_access('administer dexpmasonry')) {
    drupal_add_library('system', 'ui.resizable');
    drupal_add_js(drupal_get_path('module', 'dexp_grid') . '/js/dexp-grid-masonry-admin.js');
  }
}

/*
 * Helpers
 */

function _dexp_grid_node_get_term($vid, $nid) {
  $results = db_query('select t.tid FROM {taxonomy_index} t LEFT JOIN {taxonomy_term_data} tt ON t.tid = tt.tid WHERE t.nid = :nid AND tt.vid = :vid', array(':vid' => $vid, ':nid' => $nid));
  $terms = array();
  foreach ($results as $result) {
    $terms[] = taxonomy_term_load($result->tid);
  }
  return $terms;
}

function dexp_grid_masonry_save($view, $item, $width, $height) {
  $result = db_select('dexp_grid', 'm')
          ->fields('m')
          ->condition('view', $view, '=')
          ->condition('item', $item, '=')
          ->execute()
          ->fetchAssoc();
  if ($result) {
    db_update('dexp_grid')
            ->fields(array(
                'width' => $width,
                'height' => $height,
            ))
            ->condition('view', $view, '=')
            ->condition('item', $item, '=')
            ->execute();
  } else {
    db_insert('dexp_grid')
            ->fields(array(
                'view' => $view,
                'item' => $item,
                'width' => $width,
                'height' => $height,
            ))
            ->execute();
  }
  return t('Masonry saved');
}

function dexp_grid_masonry_size($view, $item) {
  $result = db_select('dexp_grid', 'm')
          ->fields('m')
          ->condition('view', $view, '=')
          ->condition('item', $item, '=')
          ->execute()
          ->fetchAssoc();
  if ($result) {
    return array(
        'width' => $result['width'],
        'height' => $result['height'],
    );
  }
  return array('width' => 1, 'height' => 1);
}

/**
 * Implements hook_permission()
 */
function dexp_grid_permission() {
  return array(
      'administer dexp grid masonry' => array(
          'title' => t('Administer Grid Masonry'),
          'description' => t('Administer Dexp Masonry Grid.'),
      ),
  );
}
